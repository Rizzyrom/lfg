datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String             @id @default(cuid())
  username         String             @unique
  passwordHash     String
  createdAt        DateTime           @default(now())
  memberships      Membership[]
  messages         Message[]
  invitesCreated   Invite[]
  sessions         Session[]
  notifications    Notification[]
  reactions        Reaction[]
  pushSubscriptions PushSubscription[]
  watchlist        WatchItem[]        @relation("WatchItemCreator")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Invite {
  id          String    @id @default(cuid())
  tokenHash   String    @unique
  expiresAt   DateTime
  consumedAt  DateTime?
  createdById String
  createdBy   User      @relation(fields: [createdById], references: [id])
  groupId     String
}

model Group {
  id          String       @id @default(cuid())
  nameEnc     String
  createdById String
  createdAt   DateTime     @default(now())
  memberships Membership[]
  messages    Message[]
  watchlist   WatchItem[]
}

model Membership {
  userId   String
  groupId  String
  role     Role     @default(MEMBER)
  joinedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id])
  group    Group    @relation(fields: [groupId], references: [id])

  @@id([userId, groupId])
}

enum Role {
  ADMIN
  MEMBER
  ANALYST
  BOT
}

model Message {
  id            String         @id @default(cuid())
  groupId       String
  senderId      String
  ciphertext    String
  mediaPtr      String?
  replyToId     String?
  createdAt     DateTime       @default(now())
  group         Group          @relation(fields: [groupId], references: [id])
  sender        User           @relation(fields: [senderId], references: [id])
  replyTo       Message?       @relation("MessageReplies", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies       Message[]      @relation("MessageReplies")
  notifications Notification[]
  reactions     Reaction[]

  @@index([groupId, createdAt(sort: Desc)])
  @@index([senderId])
}

model WatchItem {
  id        String   @id @default(cuid())
  groupId   String
  userId    String
  symbol    String
  source    String
  tags      String[]
  createdAt DateTime @default(now())
  group     Group    @relation(fields: [groupId], references: [id])
  user      User     @relation("WatchItemCreator", fields: [userId], references: [id])

  @@unique([groupId, symbol, source])
  @@index([userId])
  @@index([groupId, createdAt])
}

model PriceCache {
  symbol    String
  source    String
  price     Decimal
  change24h Decimal?
  change30d Decimal?
  updatedAt DateTime @default(now())

  @@id([symbol, source])
  @@index([updatedAt])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  messageId String
  type      String   // "mention"
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([userId, read])
}

model Reaction {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  emoji     String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
}

model PushSubscription {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String   @unique
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model TickerMention {
  symbol          String
  source          String
  groupId         String
  count           Int      @default(1)
  lastMentionedAt DateTime @default(now())

  @@id([symbol, source, groupId])
  @@index([groupId, count])
}

model TweetSnapshot {
  tweetId     String   @id
  text        String
  author      String
  authorId    String
  createdAt   DateTime
  likes       Int      @default(0)
  retweets    Int      @default(0)
  isAvailable Boolean  @default(true)
  snapshotAt  DateTime @default(now())
  validatedAt DateTime @default(now())

  @@index([isAvailable])
  @@index([validatedAt])
}

// Chat Enhancement Models
model SystemEvent {
  id        String   @id @default(cuid())
  groupId   String
  userId    String
  command   String
  args      Json?
  status    String   @default("ok")
  detail    String?
  createdAt DateTime @default(now())

  @@index([groupId, createdAt])
}

model ChatContextSetting {
  groupId         String   @id
  contextEnabled  Boolean  @default(true)
  updatedAt       DateTime @updatedAt
}

model SocialFeedSource {
  id         String   @id @default(cuid())
  groupId    String
  platform   String   // "x" or "reddit"
  handle     String
  platformId String?
  addedById  String
  addedAt    DateTime @default(now())

  @@unique([groupId, platform, handle])
  @@index([groupId])
}

model ChatAlert {
  id          String   @id @default(cuid())
  groupId     String
  userId      String
  alertType   String   // "price" or "keyword"
  targetSymbol String?
  targetKeyword String?
  threshold   Decimal?
  direction   String?  // "above" or "below"
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  @@index([groupId, isActive])
  @@index([userId])
}

model ChatPin {
  id        String   @id @default(cuid())
  groupId   String
  messageId String   @unique
  pinnedBy  String
  pinnedAt  DateTime @default(now())

  @@index([groupId, pinnedAt])
}
